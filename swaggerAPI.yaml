---
openapi: "3.0.1"
info:
  title: "E commerce"
  description: "API "
  version: "001"
  contact:
   email: doaawasil.abdulrahman@integrify.io
servers:
 - url: "http://locallgost300"
 
tags:
  - name: Products
    description: every thing about products
  - name: Users 
    description: every thing about users
  - name: Categories
    description: every thing about categories
  - name: Orders 
    description: every thing about orders

components:
  schemas:
    Product:
      type: object
      required:
        - title
        - price
        - category
      properties:
        id:
          type: string
          description: in the backend
        title:
          type: string
          description: the name of the product
        price:
          type: number
          description: the price of the product
        category:
           $ref: '#/components/schemas/Category'
        image:
          type: string
          description: the image of the product
        description:
          type: string
          description: description of the product
        rating:
          type: object
          properties:
            rate: 
              type: number
            count:
              type: number
      example:
       id: 1
       title: laptop
       price: 1000
       category: computer
       description: newest version of the laptop
       rating:
        rate: 2.8
        count: 399
    Category:
      type: object
      properties:
        id: 
          type: number
        name:
          type: string
    User:
      type: object 
      properties:
        id: 
          type: number
        name:
          type: string
        email:
          type: string
        password:
          type: string
    Order:
      type: object
      properties:
        id: 
          type: string
        product:
          type: array 
          items:
            $ref: '#/components/schemas/Product'  
        totalPrice:
          type: number
paths:
  /products:
   get:
     tags: 
       - products
     summary: get  all products
     parameters: 
      - in: query
        name: page
        schema: 
          type: number
        required: false
      - in: query
        name: limit
        schema: 
          type: number
        required: false
      - in: query
        name: sortBy
        schema: 
          type: string
          enum: 
            - 'asc'
            - 'desc'
        required: false  
     responses: 
      200:
        description: all the products are here
        content:
         application/json:
           schema:
             type: array
             items: 
               $ref: '#/components/schemas/Product'
           
      500:
        description: server error
        
   post:
      tags: 
        - Products 
      summary: creact new product
      description: creact new product
      requestBody: 
       content:
         application/json:
           schema:
               $ref: '#/components/schemas/Product'
      
      responses:  
       201:
          description: a product is created
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/Product'
       500:
          description: server error    
               
  /products/{productId}:
   get:
     tags: 
       - Products
     summary: the single product
     parameters:
      - in : path
        name: productId
        required: true
        schema:
          type: string
          
     responses: 
      200:
        description:  the product is here
        content:
         application/json:
           schema:
                $ref: '#/components/schemas/Product'
           
      500:
        description: server error
  
   delete:
     tags: 
       - Products
     summary: delete a single product
     parameters:
      - in : path
        name: productId
        required: true
        schema:
          type: string
          
     responses: 
      200:
        description:  the product is here
           
      500:
        description: server error
    
   put:
     tags: 
       - Products
     summary: update product
     description: update
     requestBody:
      content:
         application/json:
           schema:
                $ref: '#/components/schemas/Product'
     parameters:
      - in : path
        name: productId
        required: true
        schema:
          type: string
          
     responses: 
      200:
        description:  the product is updated
        content:
         application/json:
           schema:
                $ref: '#/components/schemas/Product'
           
      500:
        description: server error
        
  /product/search:
    get:
      tags: 
       - Products
      summary: search product
      parameters:
      - in : query
        name: search
        required: true
        schema:
          type: string
      responses: 
       200:
         description:  the product you are searching for is here
         content:
           application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Product'
           
       500:
          description: server error
        
          
  /categories:
   get:
     tags: 
       - Categories
     summary: get  all categories
     responses: 
      200:
        description: all the categories are here
        content:
         application/json:
           schema:
             type: array
             items: 
               $ref: '#/components/schemas/Category'
           
      500:
        description: server error
        
   post:
      tags: 
        - Categories 
      summary: creact a new category
      description: creact a new category
      requestBody: 
       content:
         application/json:
           schema:
               $ref: '#/components/schemas/Category'
      
      responses:  
       201:
          description: a new category is created
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/Category'
       500:
          description: server error            
          
  /categories/{categoryId}:
   get:
     tags: 
       - Categories
     summary: the single category
     parameters:
      - in : path
        name: categoryId
        required: true
        schema:
          type: string
          
     responses: 
      200:
        description:  the category is here
        content:
         application/json:
           schema:
                $ref: '#/components/schemas/Category'
           
      500:
        description: server error
  
   delete:
     tags: 
       - Categories
     summary: delete a single category
     parameters:
      - in : path
        name: categoryId
        required: true
        schema:
          type: string
          
     responses: 
      200:
        description:  the category is here
           
      500:
        description: server error
    
   put:
     tags: 
       - Categories
     summary: update category
     description: update
     requestBody:
      content:
         application/json:
           schema:
                $ref: '#/components/schemas/Category'
     parameters:
      - in : path
        name: categoryId
        required: true
        schema:
          type: string
          
     responses: 
      200:
        description:  the category is updated
        content:
         application/json:
           schema:
                $ref: '#/components/schemas/Category'
           
      500:
        description: server error  
  /users:
   get:
     tags: 
       - Users
     summary: get  all Users
     responses: 
      200:
        description: all the Users are here
        content:
         application/json:
           schema:
             type: array
             items: 
               $ref: '#/components/schemas/User'
           
      500:
        description: server error
        
   post:
      tags: 
        - Users 
      summary: creact a new user
      description: creact a new user
      requestBody: 
       content:
         application/json:
           schema:
               $ref: '#/components/schemas/User'
      
      responses:  
       201:
          description: a new user is returned
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/User'
       500:
          description: server error            
          
  /users/{userId}:
   get:
     tags: 
       - Users
     summary: all the Users
     parameters:
      - in : path
        name: userId
        required: true
        schema:
          type: string
          
     responses: 
      200:
        description:  the user is here
        content:
         application/json:
           schema:
                $ref: '#/components/schemas/User'
           
      500:
        description: server error
  
   delete:
     tags: 
       - Users
     summary: delete a single user
     parameters:
      - in : path
        name: userId
        required: true
        schema:
          type: string
          
     responses: 
      200:
        description:  the user is here
           
      500:
        description: server error
    
   put:
     tags: 
       - Users
     summary: update user
     description: update
     requestBody:
      content:
         application/json:
           schema:
                $ref: '#/components/schemas/User'
     parameters:
      - in : path
        name: userId
        required: true
        schema:
          type: string
          
     responses: 
      200:
        description:  the User is updated
        content:
         application/json:
           schema:
                $ref: '#/components/schemas/User'
           
      500:
        description: server error 
  /users/login:
    post: 
     tags:
       - Users
     summary: login
     requestBody:
       content:
         application/json:
           schema:
             type: object
             properties:
                email:
                  type: string
                password:
                  type: string
     responses:
       200:
        description:  you are logged in
       401:
         description: unauthorized
       500:
        description: server error 
  /users/logout:
    post: 
      tags:
        - Users
      summary: logout 
      responses:
        200: 
         description: you logged out
        500: 
         description: server error 
        
  /orders:
   get:
     tags: 
       - Orders
     summary: get  all Orders
     responses: 
      200:
        description: all the Orders are here
        content:
         application/json:
           schema:
             type: array
             items: 
               $ref: '#/components/schemas/Order'
           
      500:
        description: server error
   post:
      tags: 
        - Orders 
      summary: creact a new order
      description: creact a new order
      requestBody: 
       content:
         application/json:
           schema:
               $ref: '#/components/schemas/Order'
      
      responses:  
       201:
          description: a new order is created
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/Order'
       500:
          description: server error            
          
  /orders/{orderId}:
   get:
     tags: 
       - Orders
     summary: an order
     parameters:
      - in : path
        name: orderId
        required: true
        schema:
         type: string
     responses: 
      200:
        description:  find the order 
        content:
         application/json:
           schema:
                $ref: '#/components/schemas/Order'
           
      500:
        description: server error
  
   delete:
     tags: 
       - Orders
     summary: delete a single Order
     parameters:
      - in : path
        name: orderId
        required: true
        schema:
          type: string
     responses: 
      200:
        description:  delete the order
           
      500:
        description: server error
    
   put:
     tags: 
       - Orders
     summary: update order
     description: update
     parameters:
      - in : path
        name: orderId
        required: true
        schema:
          type: string
     requestBody:
      content:
         application/json:
           schema:
                $ref: '#/components/schemas/Order'
     
          
     responses: 
      200:
        description:  the User is updated
        content:
         application/json:
           schema:
                $ref: '#/components/schemas/Order'
      400:
        description: order not found
      500:
        description: server error 
      